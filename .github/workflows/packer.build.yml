name: Packer Build

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  packer-build:
    name: Packer Build
    runs-on: ubuntu-latest
    environment: production

    env:
      AWS_REGION: us-east-1

    strategy:
      matrix:
        node-version: [21.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: npm ci

      - name: Build application artifact
        run: npm run build

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: "1.10.0"

      - name: Set script permissions
        run: chmod +x scripts/*.sh

      - name: Build custom AMI
        run: |
          packer init .
          packer build -debug \
            -var "aws_region=${{ secrets.AWS_REGION }}" \
            -var "demo_account_id=${{ secrets.DEMO_ACCOUNT_ID }}" \
            aws.pkr.hcl

      - name: Update Launch Template with latest AMI ID
        id: updating
        run: |
          echo "Deploying Packer Build"
          AMI_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2)
          echo "$AMI_ID"
          echo "ami=$AMI_ID" >> "$GITHUB_OUTPUT"

  autoscaling_refresh:
    needs: packer-build
    runs-on: ubuntu-latest
    environment: production
    name: Auto scaling group launch template & instance refresh

    steps:
      - name: Configure AWS Credentials for Dev
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure the launch template
        id: configuring
        run: |
          aws --version

          # Get the Launch Template ID
          LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates --filters "Name=launch-template-name,Values=csye6225_asg" --query 'LaunchTemplates[0].LaunchTemplateId' --output text)
          echo "Launch Template ID: $LAUNCH_TEMPLATE_ID"

          # Get the latest AMI ID
          AMI_ID=$(aws ec2 describe-images --owners self --filters "Name=name,Values=csye6225-webapp-2024-11-19-02-44-15" --query 'Images[0].ImageId' --output text)
          echo "Latest AMI ID: $AMI_ID"

          # Create new Launch Template version
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id $LAUNCH_TEMPLATE_ID \
            --version-description "New version with updated AMI" \
            --source-version '$Latest' \
            --launch-template-data "{\"ImageId\":\"$AMI_ID\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)
          echo "New Launch Template Version: $NEW_VERSION"

          # Set the new version as default
          aws ec2 modify-launch-template --launch-template-id $LAUNCH_TEMPLATE_ID --default-version $NEW_VERSION

      - name: Instance Refresh with latest AMI ID
        id: refreshing
        run: |
          # Auto Scaling Group name
          ASG_NAME="csye6225-asg"
          echo "Auto Scaling Group Name: $ASG_NAME"

          # Start instance refresh
          REFRESH_ID=$(aws autoscaling start-instance-refresh --auto-scaling-group-name $ASG_NAME --query 'InstanceRefreshId' --output text)
          echo "Instance Refresh ID: $REFRESH_ID"

          # Wait for instance refresh to complete
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $ASG_NAME --instance-refresh-ids $REFRESH_ID --query 'InstanceRefreshes[0].Status' --output text)
            echo "Refresh Status: $STATUS"
            if [ "$STATUS" = "Successful" ]; then
              echo "Instance refresh completed successfully"
              break
            elif [ "$STATUS" = "Failed" ]; then
              echo "Instance refresh failed"
              exit 1
            else
              echo "Waiting for instance refresh to complete..."
              sleep 30
            fi
          done
