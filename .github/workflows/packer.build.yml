name: Packer Build

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  packer-build:
    name: Packer Build
    runs-on: ubuntu-latest
    environment: production

    env:
      AWS_REGION: us-east-1
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_NAME: ${{ secrets.DB_NAME }}
      PORT: ${{ secrets.PORT }}

    strategy:
      matrix:
        node-version: [21.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create /opt/app directory
        run: sudo mkdir -p /opt/app

      - name: Create .env file
        run: |
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_DIALECT=${{ secrets.DB_DIALECT }}" >> .env
          echo "PORT=8080" >> .env
          sudo mv .env /opt/app/.env

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup MySQL
        run: |
          sudo /etc/init.d/mysql start
          mysql -h 127.0.0.1 -u root -proot -e "CREATE DATABASE IF NOT EXISTS \`${{ secrets.DB_NAME }}\`;"
          mysql -h 127.0.0.1 -u root -proot -e "CREATE USER IF NOT EXISTS '${{ secrets.DB_USER }}'@'%' IDENTIFIED WITH mysql_native_password BY '${{ secrets.DB_PASSWORD }}';"
          mysql -h 127.0.0.1 -u root -proot -e "GRANT ALL PRIVILEGES ON \`${{ secrets.DB_NAME }}\`.* TO '${{ secrets.DB_USER }}'@'%';"
          mysql -h 127.0.0.1 -u root -proot -e "FLUSH PRIVILEGES;"

      - name: Install Dependencies
        run: npm ci

      #   - name: Run Integration Tests
      #     run: npm test -- --detectOpenHandles --verbose --forceExit

      - name: Build application artifact
        run: |
          cp .env dist/.env
          npm run build
          zip -r webapp-artifact.zip dist -x "node_modules/*" "*.git/*"

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: "1.10.0"

      - name: Set script permissions
        run: chmod +x scripts/*.sh

      - name: Build custom AMI
        run: |
          packer init .
          packer build -debug \
            -var "aws_region=${{ env.AWS_REGION }}" \
            -var "demo_account_id=${{ secrets.DEMO_ACCOUNT_ID }}" \
            aws.pkr.hcl
